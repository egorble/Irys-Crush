const { ethers } = require('ethers');
const fs = require('fs');
require('dotenv').config();

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–≤–Ω–∏–π ABI –∑ —Ñ–∞–π–ª—É
const contractABI = JSON.parse(fs.readFileSync('./artifacts/IrysCrushLeaderboard.abi.json', 'utf8'));

const provider = new ethers.JsonRpcProvider(process.env.IRYS_RPC_URL);
const wallet1 = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
const wallet2 = new ethers.Wallet(process.env.WALLET2, provider);

const contract1 = new ethers.Contract(process.env.CONTRACT_ADDRESS, contractABI, wallet1);
const contract2 = new ethers.Contract(process.env.CONTRACT_ADDRESS, contractABI, wallet2);

async function finalTest() {
    console.log('üéÆ –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—É IRYS Crush');
    console.log('=' .repeat(60));
    console.log(`üìç –ö–æ–Ω—Ç—Ä–∞–∫—Ç: ${process.env.CONTRACT_ADDRESS}`);
    console.log(`üåê –ú–µ—Ä–µ–∂–∞: ${process.env.IRYS_NETWORK}`);
    console.log('');
    
    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—ñ–≤
        const balance1 = await provider.getBalance(wallet1.address);
        const balance2 = await provider.getBalance(wallet2.address);
        console.log(`üí∞ –ë–∞–ª–∞–Ω—Å Wallet1 (${wallet1.address}): ${ethers.formatEther(balance1)} IRYS`);
        console.log(`üí∞ –ë–∞–ª–∞–Ω—Å Wallet2 (${wallet2.address}): ${ethers.formatEther(balance2)} IRYS`);
        console.log('');
        
        // –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
        console.log('üìä –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É');
        console.log('-'.repeat(40));
        
        try {
            const totalPlayers = await contract1.getTotalPlayers();
            console.log(`‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤: ${totalPlayers}`);
        } catch (error) {
            console.log(`‚ùå getTotalPlayers –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
        }
        
        try {
            const isRegistered1 = await contract1.isPlayerRegistered(wallet1.address);
            const isRegistered2 = await contract2.isPlayerRegistered(wallet2.address);
            console.log(`‚úÖ Wallet1 –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: ${isRegistered1}`);
            console.log(`‚úÖ Wallet2 –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: ${isRegistered2}`);
        } catch (error) {
            console.log(`‚ùå isPlayerRegistered –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
        }
        
        // –¢–µ—Å—Ç 2: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥—Ä–∞–≤—Ü—ñ–≤
        console.log('\nüë§ –¢–µ—Å—Ç 2: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥—Ä–∞–≤—Ü—ñ–≤');
        console.log('-'.repeat(40));
        
        try {
            const player1Info = await contract1.getPlayer(wallet1.address);
            console.log(`‚úÖ –ì—Ä–∞–≤–µ—Ü—å 1:`);
            console.log(`   –ù—ñ–∫–Ω–µ–π–º: ${player1Info[0]}`);
            console.log(`   –ù–∞–π–∫—Ä–∞—â–∏–π —Ä–∞—Ö—É–Ω–æ–∫: ${player1Info[1]}`);
            console.log(`   –Ü–≥–æ—Ä –∑—ñ–≥—Ä–∞–Ω–æ: ${player1Info[2]}`);
            console.log(`   –û—Å—Ç–∞–Ω–Ω—è –≥—Ä–∞: ${new Date(Number(player1Info[3]) * 1000).toLocaleString()}`);
        } catch (error) {
            console.log(`‚ùå getPlayer –¥–ª—è Wallet1 –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
        }
        
        try {
            const player2Info = await contract2.getPlayer(wallet2.address);
            console.log(`‚úÖ –ì—Ä–∞–≤–µ—Ü—å 2:`);
            console.log(`   –ù—ñ–∫–Ω–µ–π–º: ${player2Info[0]}`);
            console.log(`   –ù–∞–π–∫—Ä–∞—â–∏–π —Ä–∞—Ö—É–Ω–æ–∫: ${player2Info[1]}`);
            console.log(`   –Ü–≥–æ—Ä –∑—ñ–≥—Ä–∞–Ω–æ: ${player2Info[2]}`);
            console.log(`   –û—Å—Ç–∞–Ω–Ω—è –≥—Ä–∞: ${new Date(Number(player2Info[3]) * 1000).toLocaleString()}`);
        } catch (error) {
            console.log(`‚ùå getPlayer –¥–ª—è Wallet2 –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
        }
        
        // –¢–µ—Å—Ç 3: –°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PvP –∫—ñ–º–Ω–∞—Ç–∏ (–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)
        console.log('\nüè† –¢–µ—Å—Ç 3: –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PvP –∫—ñ–º–Ω–∞—Ç–∏');
        console.log('-'.repeat(40));
        
        const entryFee = ethers.parseEther('0.01');
        const gameTime = 300;
        const maxPlayers = 3;
        
        console.log(`–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫—ñ–º–Ω–∞—Ç–∏:`);
        console.log(`   Entry Fee: ${ethers.formatEther(entryFee)} IRYS`);
        console.log(`   Game Time: ${gameTime} —Å–µ–∫—É–Ω–¥`);
        console.log(`   Max Players: ${maxPlayers}`);
        
        try {
            console.log('\n–°–ø—Ä–æ–±–∞ —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É createPvPRoom...');
            await contract1.createPvPRoom.staticCall(entryFee, gameTime, maxPlayers);
            console.log('‚úÖ –°—Ç–∞—Ç–∏—á–Ω–∏–π –≤–∏–∫–ª–∏–∫ —É—Å–ø—ñ—à–Ω–∏–π!');
            
            console.log('–°–ø—Ä–æ–±–∞ –æ—Ü—ñ–Ω–∫–∏ –≥–∞–∑—É...');
            const gasEstimate = await contract1.createPvPRoom.estimateGas(entryFee, gameTime, maxPlayers);
            console.log(`‚úÖ –û—Ü—ñ–Ω–∫–∞ –≥–∞–∑—É: ${gasEstimate.toString()}`);
            
            console.log('–°–ø—Ä–æ–±–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É...');
            const createTx = await contract1.createPvPRoom(entryFee, gameTime, maxPlayers);
            console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: ${createTx.hash}`);
            
            const receipt = await createTx.wait();
            console.log(`‚úÖ –ö—ñ–º–Ω–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞! Gas used: ${receipt.gasUsed}`);
            
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ roomId –∑ –ø–æ–¥—ñ—ó
            const roomCreatedEvent = receipt.logs.find(log => {
                try {
                    const parsed = contract1.interface.parseLog(log);
                    return parsed.name === 'RoomCreated';
                } catch {
                    return false;
                }
            });
            
            let roomId = 1;
            if (roomCreatedEvent) {
                const parsed = contract1.interface.parseLog(roomCreatedEvent);
                roomId = parsed.args.roomId;
                console.log(`üÜî Room ID: ${roomId}`);
            }
            
            // –¢–µ—Å—Ç 4: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω—É –∫—ñ–º–Ω–∞—Ç—É
            console.log('\nüìä –¢–µ—Å—Ç 4: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω—É –∫—ñ–º–Ω–∞—Ç—É');
            console.log('-'.repeat(40));
            
            try {
                const roomInfo = await contract1.getPvPRoom(roomId);
                console.log(`‚úÖ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫—ñ–º–Ω–∞—Ç—É ${roomId}:`);
                console.log(`   Host: ${roomInfo[0]}`);
                console.log(`   Entry Fee: ${ethers.formatEther(roomInfo[1])} IRYS`);
                console.log(`   Game Time: ${roomInfo[2]} —Å–µ–∫—É–Ω–¥`);
                console.log(`   Players: ${roomInfo[3].length}/${roomInfo[6]}`);
                console.log(`   Is Active: ${roomInfo[4]}`);
                console.log(`   Game Started: ${roomInfo[5]}`);
            } catch (error) {
                console.log(`‚ùå getPvPRoom –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
            }
            
            // –¢–µ—Å—Ç 5: –•–æ—Å—Ç –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
            console.log('\nüë§ –¢–µ—Å—Ç 5: –•–æ—Å—Ç –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏');
            console.log('-'.repeat(40));
            
            try {
                console.log('–•–æ—Å—Ç –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è –¥–æ –≤–ª–∞—Å–Ω–æ—ó –∫—ñ–º–Ω–∞—Ç–∏...');
                const joinTx = await contract1.joinPvPRoom(roomId, { value: entryFee });
                console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: ${joinTx.hash}`);
                
                const joinReceipt = await joinTx.wait();
                console.log(`‚úÖ –•–æ—Å—Ç –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è! Gas used: ${joinReceipt.gasUsed}`);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
                const updatedRoomInfo = await contract1.getPvPRoom(roomId);
                console.log(`üìä –û–Ω–æ–≤–ª–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: ${updatedRoomInfo[3].length}/${updatedRoomInfo[6]} –≥—Ä–∞–≤—Ü—ñ–≤`);
                
            } catch (error) {
                console.log(`‚ùå joinPvPRoom –¥–ª—è —Ö–æ—Å—Ç–∞ –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
            }
            
            // –¢–µ—Å—Ç 6: –î—Ä—É–≥–∏–π –≥—Ä–∞–≤–µ—Ü—å –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è
            console.log('\nüë• –¢–µ—Å—Ç 6: –î—Ä—É–≥–∏–π –≥—Ä–∞–≤–µ—Ü—å –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è');
            console.log('-'.repeat(40));
            
            try {
                console.log('Wallet2 –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏...');
                const joinTx2 = await contract2.joinPvPRoom(roomId, { value: entryFee });
                console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: ${joinTx2.hash}`);
                
                const joinReceipt2 = await joinTx2.wait();
                console.log(`‚úÖ –ì—Ä–∞–≤–µ—Ü—å 2 –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è! Gas used: ${joinReceipt2.gasUsed}`);
                
                // –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
                const finalRoomInfo = await contract1.getPvPRoom(roomId);
                console.log(`üìä –§—ñ–Ω–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: ${finalRoomInfo[3].length}/${finalRoomInfo[6]} –≥—Ä–∞–≤—Ü—ñ–≤`);
                console.log(`üë• –°–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤:`);
                finalRoomInfo[3].forEach((player, index) => {
                    console.log(`   ${index + 1}. ${player}`);
                });
                
            } catch (error) {
                console.log(`‚ùå joinPvPRoom –¥–ª—è –≥—Ä–∞–≤—Ü—è 2 –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
            }
            
            // –¢–µ—Å—Ç 7: –ó–∞–ø—É—Å–∫ –≥—Ä–∏
            console.log('\nüöÄ –¢–µ—Å—Ç 7: –ó–∞–ø—É—Å–∫ –≥—Ä–∏');
            console.log('-'.repeat(40));
            
            try {
                console.log('–•–æ—Å—Ç –∑–∞–ø—É—Å–∫–∞—î –≥—Ä—É...');
                const startTx = await contract1.startPvPGame(roomId);
                console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: ${startTx.hash}`);
                
                const startReceipt = await startTx.wait();
                console.log(`‚úÖ –ì—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! Gas used: ${startReceipt.gasUsed}`);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
                const gameRoomInfo = await contract1.getPvPRoom(roomId);
                console.log(`üìä –°—Ç–∞—Ç—É—Å –≥—Ä–∏: Game Started = ${gameRoomInfo[5]}`);
                
            } catch (error) {
                console.log(`‚ùå startPvPGame –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
            }
            
        } catch (error) {
            console.log(`‚ùå createPvPRoom –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
            console.log(`Error code: ${error.code}`);
            if (error.data) {
                console.log(`Error data: ${error.data}`);
            }
        }
        
        console.log('\n' + '='.repeat(60));
        console.log('üéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        console.log('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø—Ä–∞—Ü—é—î –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.');
        if (process.env.CONTRACT_ADDRESS) {
            console.log(`üîó –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: ${process.env.CONTRACT_ADDRESS}`);
        }
        console.log('='.repeat(60));
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
    }
}

finalTest().catch(console.error);