const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Irys –º–µ—Ä–µ–∂—ñ
const IRYS_CONFIG = {
    name: 'Irys Testnet',
    chainId: 1270,
    rpcUrl: 'https://testnet-rpc.irys.xyz/v1/execution-rpc',
    symbol: 'IRYS',
    decimals: 18
};

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è
const DISTRIBUTION_CONFIG = {
    tokenAmount: '0.1', // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è
    gasLimit: '21000',
    maxGasPrice: '20000000000', // 20 Gwei
    batchSize: 10, // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –≤ –æ–¥–Ω–æ–º—É –±–∞—Ç—á—ñ
    delayBetweenBatches: 5000, // 5 —Å–µ–∫—É–Ω–¥ –º—ñ–∂ –±–∞—Ç—á–∞–º–∏
};

class TokenDistributor {
    constructor() {
        this.provider = null;
        this.wallet = null;
        this.recipients = [];
        this.distributionLog = [];
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    async initialize() {
        try {
            console.log('üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Irys –º–µ—Ä–µ–∂—ñ...');
            
            // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ RPC
            this.provider = new ethers.JsonRpcProvider(IRYS_CONFIG.rpcUrl);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            const network = await this.provider.getNetwork();
            console.log(`‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –º–µ—Ä–µ–∂—ñ: ${network.name} (Chain ID: ${network.chainId})`);
            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–∞–º–∞–Ω—Ü—è
            if (!process.env.PRIVATE_KEY) {
                throw new Error('‚ùå PRIVATE_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!');
            }
            
            this.wallet = new ethers.Wallet(process.env.PRIVATE_KEY, this.provider);
            console.log(`üëõ –ì–∞–º–∞–Ω–µ—Ü—å: ${this.wallet.address}`);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
            const balance = await this.provider.getBalance(this.wallet.address);
            const balanceInIRYS = ethers.formatEther(balance);
            console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${balanceInIRYS} IRYS`);
            
            if (parseFloat(balanceInIRYS) < 1) {
                console.warn('‚ö†Ô∏è  –ù–∏–∑—å–∫–∏–π –±–∞–ª–∞–Ω—Å! –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –º–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 1 IRYS');
            }
            
            return true;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error.message);
            return false;
        }
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤
    loadRecipients(filePath = 'recipients.txt') {
        try {
            if (!fs.existsSync(filePath)) {
                console.log(`üìù –°—Ç–≤–æ—Ä—é—é —Ñ–∞–π–ª ${filePath}...`);
                fs.writeFileSync(filePath, '# –î–æ–¥–∞–π—Ç–µ –∞–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—ñ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Ä—è–¥–æ–∫)\n# 0x1234567890abcdef...\n');
                console.log(`‚úÖ –§–∞–π–ª ${filePath} —Å—Ç–≤–æ—Ä–µ–Ω–æ. –î–æ–¥–∞–π—Ç–µ –∞–¥—Ä–µ—Å–∏ –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤.`);
                return false;
            }

            const content = fs.readFileSync(filePath, 'utf8');
            const addresses = content
                .split('\n')
                .map(line => line.trim())
                .filter(line => line && !line.startsWith('#'))
                .filter(line => ethers.isAddress(line));

            this.recipients = addresses;
            console.log(`üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.recipients.length} –∞–¥—Ä–µ—Å –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤`);
            
            if (this.recipients.length === 0) {
                console.log('‚ö†Ô∏è  –ù–µ–º–∞—î –≤–∞–ª—ñ–¥–Ω–∏—Ö –∞–¥—Ä–µ—Å —É —Ñ–∞–π–ª—ñ!');
                return false;
            }

            return true;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤:', error.message);
            return false;
        }
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑ —Ñ–∞–π–ª—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π
    loadFromVerifications(filePath = 'task_verifications.txt') {
        try {
            if (!fs.existsSync(filePath)) {
                console.log(`‚ùå –§–∞–π–ª ${filePath} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
                return false;
            }

            const content = fs.readFileSync(filePath, 'utf8');
            const lines = content.split('\n').filter(line => line.trim());
            
            const addresses = new Set();
            
            lines.forEach(line => {
                try {
                    const data = JSON.parse(line);
                    if (data.wallet && ethers.isAddress(data.wallet) && data.wallet !== 'anonymous') {
                        addresses.add(data.wallet);
                    }
                } catch (e) {
                    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ —Ä—è–¥–∫–∏
                }
            });

            this.recipients = Array.from(addresses);
            console.log(`üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.recipients.length} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞–¥—Ä–µ—Å –∑ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π`);
            return this.recipients.length > 0;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π:', error.message);
            return false;
        }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∞–¥—Ä–µ—Å–∞ –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–ª–∞ —Ç–æ–∫–µ–Ω–∏
    async checkAlreadyReceived(address) {
        const logFile = 'distribution_log.json';
        
        if (!fs.existsSync(logFile)) {
            return false;
        }

        try {
            const log = JSON.parse(fs.readFileSync(logFile, 'utf8'));
            return log.some(entry => entry.recipient.toLowerCase() === address.toLowerCase());
        } catch (error) {
            return false;
        }
    }

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤ –æ–¥–Ω–æ–º—É –æ—Ç—Ä–∏–º—É–≤–∞—á—É
    async sendTokens(recipientAddress, amount) {
        try {
            console.log(`üí∏ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ ${amount} IRYS –¥–æ ${recipientAddress}...`);

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–≤
            const alreadyReceived = await this.checkAlreadyReceived(recipientAddress);
            if (alreadyReceived) {
                console.log(`‚è≠Ô∏è  ${recipientAddress} –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–≤ —Ç–æ–∫–µ–Ω–∏, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ`);
                return { success: false, reason: 'already_received' };
            }

            // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            const tx = {
                to: recipientAddress,
                value: ethers.parseEther(amount),
                gasLimit: DISTRIBUTION_CONFIG.gasLimit,
            };

            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ –≥–∞–∑—É
            const feeData = await this.provider.getFeeData();
            tx.gasPrice = feeData.gasPrice;

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏ –≥–∞–∑—É
            if (tx.gasPrice > BigInt(DISTRIBUTION_CONFIG.maxGasPrice)) {
                console.log(`‚ö†Ô∏è  –¶—ñ–Ω–∞ –≥–∞–∑—É –∑–∞–Ω–∞–¥—Ç–æ –≤–∏—Å–æ–∫–∞: ${ethers.formatUnits(tx.gasPrice, 'gwei')} Gwei`);
                return { success: false, reason: 'gas_too_high' };
            }

            // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            const transaction = await this.wallet.sendTransaction(tx);
            console.log(`üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: ${transaction.hash}`);

            // –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            const receipt = await transaction.wait();
            
            if (receipt.status === 1) {
                console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ ${amount} IRYS –¥–æ ${recipientAddress}`);
                
                // –õ–æ–≥—É–≤–∞–Ω–Ω—è
                const logEntry = {
                    recipient: recipientAddress,
                    amount: amount,
                    txHash: transaction.hash,
                    timestamp: new Date().toISOString(),
                    gasUsed: receipt.gasUsed.toString(),
                    gasPrice: tx.gasPrice.toString()
                };
                
                this.distributionLog.push(logEntry);
                this.saveLog();
                
                return { success: true, txHash: transaction.hash };
            } else {
                console.log(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è: ${transaction.hash}`);
                return { success: false, reason: 'transaction_failed' };
            }

        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–æ ${recipientAddress}:`, error.message);
            return { success: false, reason: error.message };
        }
    }

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—É
    saveLog() {
        try {
            fs.writeFileSync('distribution_log.json', JSON.stringify(this.distributionLog, null, 2));
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—É:', error.message);
        }
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –ª–æ–≥—É
    loadLog() {
        try {
            if (fs.existsSync('distribution_log.json')) {
                this.distributionLog = JSON.parse(fs.readFileSync('distribution_log.json', 'utf8'));
                console.log(`üìú –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ª–æ–≥ –∑ ${this.distributionLog.length} –∑–∞–ø–∏—Å–∞–º–∏`);
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–≥—É:', error.message);
            this.distributionLog = [];
        }
    }

    // –ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞
    async distributeTokens() {
        console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ —Ç–æ–∫–µ–Ω—ñ–≤...');
        
        this.loadLog();
        
        let successful = 0;
        let failed = 0;
        let skipped = 0;

        // –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –±–∞—Ç—á—ñ
        for (let i = 0; i < this.recipients.length; i += DISTRIBUTION_CONFIG.batchSize) {
            const batch = this.recipients.slice(i, i + DISTRIBUTION_CONFIG.batchSize);
            
            console.log(`\nüì¶ –û–±—Ä–æ–±–∫–∞ –±–∞—Ç—á—É ${Math.floor(i / DISTRIBUTION_CONFIG.batchSize) + 1}/${Math.ceil(this.recipients.length / DISTRIBUTION_CONFIG.batchSize)}`);
            
            for (const recipient of batch) {
                const result = await this.sendTokens(recipient, DISTRIBUTION_CONFIG.tokenAmount);
                
                if (result.success) {
                    successful++;
                } else if (result.reason === 'already_received') {
                    skipped++;
                } else {
                    failed++;
                }

                // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è–º–∏
                await new Promise(resolve => setTimeout(resolve, 1000));
            }

            // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –±–∞—Ç—á–∞–º–∏
            if (i + DISTRIBUTION_CONFIG.batchSize < this.recipients.length) {
                console.log(`‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è ${DISTRIBUTION_CONFIG.delayBetweenBatches / 1000} —Å–µ–∫—É–Ω–¥...`);
                await new Promise(resolve => setTimeout(resolve, DISTRIBUTION_CONFIG.delayBetweenBatches));
            }
        }

        console.log('\nüéâ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ: ${successful}`);
        console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
        console.log(`‚ùå –ü–æ–º–∏–ª–∫–∏: ${failed}`);
        console.log(`üìä –ó–∞–≥–∞–ª–æ–º –æ–±—Ä–æ–±–ª–µ–Ω–æ: ${this.recipients.length}`);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞
    async checkRecipientBalance(address) {
        try {
            const balance = await this.provider.getBalance(address);
            return ethers.formatEther(balance);
        } catch (error) {
            return 'Error';
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    async showStats() {
        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏:');
        console.log('‚ïê'.repeat(50));
        
        const balance = await this.provider.getBalance(this.wallet.address);
        console.log(`üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${ethers.formatEther(balance)} IRYS`);
        
        if (this.distributionLog.length > 0) {
            const totalSent = this.distributionLog.reduce((sum, entry) => sum + parseFloat(entry.amount), 0);
            console.log(`üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω—ñ–≤: ${totalSent} IRYS`);
            console.log(`üéØ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: ${this.distributionLog.length}`);
            
            const lastTx = this.distributionLog[this.distributionLog.length - 1];
            console.log(`‚è∞ –û—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è: ${lastTx.timestamp}`);
        }
    }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
    console.log('üéÆ IrysGame Token Distributor');
    console.log('‚ïê'.repeat(40));

    const distributor = new TokenDistributor();

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    const initialized = await distributor.initialize();
    if (!initialized) {
        process.exit(1);
    }

    // –í–∏–±—ñ—Ä –¥–∂–µ—Ä–µ–ª–∞ –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤
    const args = process.argv.slice(2);
    const source = args[0] || 'verifications';

    let loaded = false;
    if (source === 'verifications') {
        loaded = distributor.loadFromVerifications();
    } else if (source === 'file') {
        loaded = distributor.loadRecipients();
    }

    if (!loaded) {
        console.log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤');
        process.exit(1);
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await distributor.showStats();

    // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    console.log(`\n‚ö†Ô∏è  –£–≤–∞–≥–∞! –ë—É–¥–µ —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ –ø–æ ${DISTRIBUTION_CONFIG.tokenAmount} IRYS –¥–æ ${distributor.recipients.length} –∞–¥—Ä–µ—Å`);
    console.log('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∞–±–æ Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...');
    
    // –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await new Promise(resolve => {
        process.stdin.once('data', resolve);
    });

    // –ó–∞–ø—É—Å–∫ —Ä–æ–∑—Å–∏–ª–∫–∏
    await distributor.distributeTokens();

    // –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    await distributor.showStats();
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    main().catch(console.error);
}

module.exports = TokenDistributor; 