// ==========================================
// PVP TIME PERSISTENCE - –ó–ê–•–ò–°–¢ –ß–ê–°–£ –ü–†–ò –û–ù–û–í–õ–ï–ù–ù–Ü –°–¢–û–†–Ü–ù–ö–ò
// ==========================================

class PVPTimePersistence {
    constructor() {
        this.storageKey = 'pvp_game_time_state';
        this.maxTimeDeviation = 5; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        this.pauseOnLeave = true; // –ß–∞—Å –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è –∫–æ–ª–∏ –≥—Ä–∞–≤–µ—Ü—å –∑–∞–ª–∏—à–∞—î —Å—Ç–æ—Ä—ñ–Ω–∫—É
        this.visibilityListenerAdded = false;
    }

    // ==========================================
    // SAVE TIME STATE
    // ==========================================

    /**
     * –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —á–∞—Å—É –≥—Ä–∏
     * @param {string} roomId - ID –∫—ñ–º–Ω–∞—Ç–∏
     * @param {number} currentTimer - –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —Ç–∞–π–º–µ—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     * @param {number} totalGameTime - –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –≥—Ä–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     * @param {number} score - –ü–æ—Ç–æ—á–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫
     * @param {boolean} gameActive - –ß–∏ –∞–∫—Ç–∏–≤–Ω–∞ –≥—Ä–∞
     * @param {boolean} isPaused - –ß–∏ –≥—Ä–∞ –Ω–∞ –ø–∞—É–∑—ñ
     */
    saveTimeState(roomId, currentTimer, totalGameTime, score = 0, gameActive = true, isPaused = false) {
        const now = Date.now();
        const timeState = {
            roomId,
            currentTimer,
            totalGameTime,
            score,
            gameActive,
            isPaused,
            savedAt: now,
            lastActiveTime: now, // –û—Å—Ç–∞–Ω–Ω—ñ–π —á–∞—Å –∫–æ–ª–∏ –≥—Ä–∞ –±—É–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞
            gameStartTime: now - (totalGameTime - currentTimer) * 1000,
            pausedTime: 0 // –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø–∞—É–∑–∏
        };

        // –Ø–∫—â–æ –æ–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Å—Ç–∞–Ω, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–∏–π —á–∞—Å –ø–∞—É–∑–∏
        const existingState = this.getTimeState(roomId);
        if (existingState && existingState.pausedTime) {
            timeState.pausedTime = existingState.pausedTime;
        }

        try {
            localStorage.setItem(this.storageKey, JSON.stringify(timeState));
            console.log('üíæ Time state saved:', { 
                timer: timeState.currentTimer, 
                paused: timeState.isPaused,
                pausedTime: timeState.pausedTime 
            });
        } catch (error) {
            console.error('‚ùå Failed to save time state:', error);
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω —á–∞—Å—É
     * @param {string} roomId - ID –∫—ñ–º–Ω–∞—Ç–∏
     * @returns {object|null} - –ó–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω –∞–±–æ null
     */
    getTimeState(roomId) {
        try {
            const saved = localStorage.getItem(this.storageKey);
            if (!saved) return null;

            const timeState = JSON.parse(saved);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Ç–∞ —Å–∞–º–∞ –∫—ñ–º–Ω–∞—Ç–∞
            if (timeState.roomId !== roomId) {
                console.log('üîÑ Different room ID, clearing old state');
                this.clearTimeState();
                return null;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π —Å—Ç–∞–Ω (–±—ñ–ª—å—à–µ 1 –≥–æ–¥–∏–Ω–∏)
            const hourAgo = Date.now() - (60 * 60 * 1000);
            if (timeState.savedAt < hourAgo) {
                console.log('‚è∞ Time state too old, clearing');
                this.clearTimeState();
                return null;
            }

            console.log('üìñ Time state loaded:', timeState);
            return timeState;
        } catch (error) {
            console.error('‚ùå Failed to load time state:', error);
            this.clearTimeState();
            return null;
        }
    }

    // ==========================================
    // CALCULATE CURRENT TIME
    // ==========================================

    /**
     * –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–∞—É–∑–∏
     * @param {string} roomId - ID –∫—ñ–º–Ω–∞—Ç–∏
     * @returns {object|null} - –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π —Å—Ç–∞–Ω —á–∞—Å—É –∞–±–æ null
     */
    calculateCurrentTime(roomId) {
        const savedState = this.getTimeState(roomId);
        if (!savedState) return null;

        const now = Date.now();
        let remainingTime = savedState.currentTimer;

        // –Ø–∫—â–æ –≥—Ä–∞ –Ω–µ –Ω–∞ –ø–∞—É–∑—ñ, —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –ø—Ä–æ–π—à–ª–æ
        if (!savedState.isPaused && savedState.lastActiveTime) {
            const activeTimePassed = Math.floor((now - savedState.lastActiveTime) / 1000);
            remainingTime = Math.max(0, savedState.currentTimer - activeTimePassed);
        }

        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å —â–æ –ø—Ä–æ–π—à–æ–≤ (–±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –ø–∞—É–∑)
        const totalActiveTime = savedState.totalGameTime - remainingTime;
        const totalPausedTime = savedState.pausedTime || 0;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Ä–æ–∑—É–º–Ω—ñ—Å—Ç—å —á–∞—Å—É
        if (totalActiveTime < 0 || totalActiveTime > savedState.totalGameTime + this.maxTimeDeviation) {
            console.warn('‚ö†Ô∏è Time calculation seems invalid, clearing state');
            this.clearTimeState();
            return null;
        }

        const calculatedState = {
            ...savedState,
            currentTimer: remainingTime,
            totalActiveTime,
            totalPausedTime,
            isValid: remainingTime > 0,
            calculatedAt: now
        };

        console.log('üßÆ Time calculated with pause support:', {
            saved: savedState.currentTimer,
            calculated: remainingTime,
            activeTime: totalActiveTime,
            pausedTime: totalPausedTime,
            isPaused: savedState.isPaused,
            isValid: calculatedState.isValid
        });

        return calculatedState;
    }

    // ==========================================
    // RESTORE GAME STATE
    // ==========================================

    /**
     * –í—ñ–¥–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –≥—Ä–∏ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–∞—É–∑–∏
     * @param {string} roomId - ID –∫—ñ–º–Ω–∞—Ç–∏
     * @param {object} gameEngine - –ï–∫–∑–µ–º–ø–ª—è—Ä PVPGameEngine
     * @returns {boolean} - –ß–∏ –±—É–ª–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞–Ω
     */
    restoreGameState(roomId, gameEngine) {
        const calculatedState = this.calculateCurrentTime(roomId);
        if (!calculatedState || !calculatedState.isValid) {
            console.log('üö´ No valid time state to restore');
            return false;
        }

        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≥—Ä–∏ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
        gameEngine.timer = calculatedState.currentTimer;
        gameEngine.score = calculatedState.score || 0;
        gameEngine.gameStartTime = calculatedState.gameStartTime;

        // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ –æ—á–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ
        console.log('üìä Restoring score:', calculatedState.score, 'to gameEngine.score:', gameEngine.score);

        // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á—ñ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–∞—É–∑–∏
        this.addVisibilityListeners(gameEngine);

        // –û–Ω–æ–≤–ª—é—î–º–æ UI –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é —â–æ–± –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è —â–æ –≤—Å–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–æ—Å—è
        setTimeout(() => {
            if (gameEngine.ui) {
                gameEngine.ui.updateTimerDisplay();
                gameEngine.ui.updateScore();
                console.log('üîÑ UI updated after restore');
            }
        }, 100);

        console.log('‚úÖ Game state restored with pause support:', {
            timer: gameEngine.timer,
            score: gameEngine.score,
            totalActiveTime: calculatedState.totalActiveTime,
            totalPausedTime: calculatedState.totalPausedTime,
            wasPaused: calculatedState.isPaused
        });

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        if (window.showNotification) {
            const activeMinutes = Math.floor(calculatedState.totalActiveTime / 60);
            const activeSeconds = calculatedState.totalActiveTime % 60;
            const pausedMinutes = Math.floor(calculatedState.totalPausedTime / 60);
            const pausedSeconds = calculatedState.totalPausedTime % 60;
            
            let message = `Game restored! Active time: ${activeMinutes}:${activeSeconds.toString().padStart(2, '0')}`;
            if (calculatedState.totalPausedTime > 0) {
                message += `, Paused time: ${pausedMinutes}:${pausedSeconds.toString().padStart(2, '0')}`;
            }
            
            window.showNotification(message, 'info');
        }

        return true;
    }

    // ==========================================
    // PAUSE/RESUME SYSTEM
    // ==========================================

    /**
     * –°—Ç–∞–≤–∏—Ç—å –≥—Ä—É –Ω–∞ –ø–∞—É–∑—É
     * @param {string} roomId - ID –∫—ñ–º–Ω–∞—Ç–∏
     * @param {object} gameEngine - –ï–∫–∑–µ–º–ø–ª—è—Ä PVPGameEngine
     */
    pauseGame(roomId, gameEngine) {
        if (!gameEngine || !gameEngine.gameActive) return;

        const now = Date.now();
        console.log('‚è∏Ô∏è Pausing game for room:', roomId, 'Score:', gameEngine.score);

        // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ –æ—á–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ
        const currentScore = gameEngine.score || 0;
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∑ –ø–∞—É–∑–æ—é
        this.saveTimeState(
            roomId,
            gameEngine.timer,
            gameEngine.gameTimeSeconds,
            currentScore,
            gameEngine.gameActive,
            true // isPaused = true
        );

        // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä –≥—Ä–∏
        if (gameEngine.stopTimer) {
            gameEngine.stopTimer();
        }

        console.log('‚è∏Ô∏è Game paused, timer stopped, score saved:', currentScore);
    }

    /**
     * –í—ñ–¥–Ω–æ–≤–ª—é—î –≥—Ä—É –∑ –ø–∞—É–∑–∏
     * @param {string} roomId - ID –∫—ñ–º–Ω–∞—Ç–∏
     * @param {object} gameEngine - –ï–∫–∑–µ–º–ø–ª—è—Ä PVPGameEngine
     */
    resumeGame(roomId, gameEngine) {
        if (!gameEngine) return;

        const savedState = this.getTimeState(roomId);
        if (!savedState || !savedState.isPaused) return;

        const now = Date.now();
        console.log('‚ñ∂Ô∏è Resuming game for room:', roomId, 'Saved score:', savedState.score);

        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—á–∫–∏ –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        if (savedState.score !== undefined && gameEngine.score !== savedState.score) {
            gameEngine.score = savedState.score;
            console.log('üìä Score restored from saved state:', savedState.score);
        }

        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∞—Å –ø–∞—É–∑–∏
        const pauseTime = Math.floor((now - savedState.savedAt) / 1000);
        const totalPausedTime = (savedState.pausedTime || 0) + pauseTime;

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –±–µ–∑ –ø–∞—É–∑–∏
        const updatedState = {
            ...savedState,
            isPaused: false,
            lastActiveTime: now,
            pausedTime: totalPausedTime,
            savedAt: now
        };

        try {
            localStorage.setItem(this.storageKey, JSON.stringify(updatedState));
        } catch (error) {
            console.error('‚ùå Failed to update resume state:', error);
        }

        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä –≥—Ä–∏
        if (gameEngine.startTimer) {
            gameEngine.startTimer();
        }

        console.log('‚ñ∂Ô∏è Game resumed, total paused time:', totalPausedTime, 'seconds');

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        if (window.showNotification) {
            const pauseMinutes = Math.floor(pauseTime / 60);
            const pauseSeconds = pauseTime % 60;
            window.showNotification(
                `Game resumed! Paused for: ${pauseMinutes}:${pauseSeconds.toString().padStart(2, '0')}`, 
                'info'
            );
        }
    }

    /**
     * –î–æ–¥–∞—î —Å–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–∞—É–∑–∏/–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
     * @param {object} gameEngine - –ï–∫–∑–µ–º–ø–ª—è—Ä PVPGameEngine
     */
    addVisibilityListeners(gameEngine) {
        if (this.visibilityListenerAdded || !gameEngine) return;

        const handleVisibilityChange = () => {
            if (document.hidden || document.visibilityState === 'hidden') {
                // –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞ - —Å—Ç–∞–≤–∏–º–æ –Ω–∞ –ø–∞—É–∑—É
                this.pauseGame(gameEngine.roomId, gameEngine);
            } else if (document.visibilityState === 'visible') {
                // –°—Ç–æ—Ä—ñ–Ω–∫–∞ –≤–∏–¥–∏–º–∞ - –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ
                this.resumeGame(gameEngine.roomId, gameEngine);
            }
        };

        const handleBeforeUnload = () => {
            // –ü–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º —Å—Ç–æ—Ä—ñ–Ω–∫–∏ - —Å—Ç–∞–≤–∏–º–æ –Ω–∞ –ø–∞—É–∑—É
            this.pauseGame(gameEngine.roomId, gameEngine);
        };

        // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á—ñ
        document.addEventListener('visibilitychange', handleVisibilityChange);
        window.addEventListener('beforeunload', handleBeforeUnload);
        window.addEventListener('pagehide', handleBeforeUnload);

        this.visibilityListenerAdded = true;
        console.log('üëÅÔ∏è Visibility listeners added for automatic pause/resume');
    }

    /**
     * –í–∏–¥–∞–ª—è—î —Å–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π
     */
    removeVisibilityListeners() {
        // –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ª—É—Ö–∞—á—ñ —Å–∫–ª–∞–¥–Ω–æ –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—ó
        // –¢–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–Ω–∞—á–∞—î–º–æ —â–æ —ó—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∑–Ω–æ–≤—É
        this.visibilityListenerAdded = false;
        console.log('üëÅÔ∏è Visibility listeners marked for removal');
    }

    // ==========================================
    // AUTO-SAVE SYSTEM
    // ==========================================

    /**
     * –ó–∞–ø—É—Å–∫–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–∞—É–∑–∏
     * @param {object} gameEngine - –ï–∫–∑–µ–º–ø–ª—è—Ä PVPGameEngine
     * @param {number} interval - –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 5 —Å–µ–∫—É–Ω–¥)
     */
    startAutoSave(gameEngine, interval = 5000) {
        // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∞–≤—Ç–æ—Å–µ–π–≤ —è–∫—â–æ —î
        this.stopAutoSave();

        // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á—ñ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–∞—É–∑–∏
        this.addVisibilityListeners(gameEngine);

        this.autoSaveInterval = setInterval(() => {
            if (gameEngine.gameActive && gameEngine.timer > 0) {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä–∞ –Ω–∞ –ø–∞—É–∑—ñ
                const isPaused = document.hidden || document.visibilityState === 'hidden';
                
                // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—á–æ–∫
                const currentScore = gameEngine.score || 0;
                
                // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if (currentScore !== (this.lastSavedScore || 0)) {
                    console.log('üìä Score changed:', this.lastSavedScore, '->', currentScore);
                    this.lastSavedScore = currentScore;
                }
                
                this.saveTimeState(
                    gameEngine.roomId,
                    gameEngine.timer,
                    gameEngine.gameTimeSeconds,
                    currentScore,
                    gameEngine.gameActive,
                    isPaused
                );
            }
        }, interval);

        console.log('üîÑ Auto-save with pause support started with', interval, 'ms interval');
    }

    /**
     * –ó—É–ø–∏–Ω—è—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
     */
    stopAutoSave() {
        if (this.autoSaveInterval) {
            clearInterval(this.autoSaveInterval);
            this.autoSaveInterval = null;
            console.log('üõë Auto-save stopped');
        }
    }

    // ==========================================
    // CLEANUP
    // ==========================================

    /**
     * –û—á–∏—â–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω —á–∞—Å—É
     */
    clearTimeState() {
        try {
            localStorage.removeItem(this.storageKey);
            console.log('üóëÔ∏è Time state cleared');
        } catch (error) {
            console.error('‚ùå Failed to clear time state:', error);
        }
    }

    /**
     * –û—á–∏—â–∞—î —Å—Ç–∞–Ω –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –≥—Ä–∏
     * @param {string} roomId - ID –∫—ñ–º–Ω–∞—Ç–∏
     */
    onGameEnd(roomId) {
        this.stopAutoSave();
        this.removeVisibilityListeners();
        this.clearTimeState();
        console.log('üèÅ Game ended, time state and listeners cleaned up');
    }

    // ==========================================
    // VALIDATION HELPERS
    // ==========================================

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∞ –≥—Ä–∞ –¥–ª—è –∫—ñ–º–Ω–∞—Ç–∏
     * @param {string} roomId - ID –∫—ñ–º–Ω–∞—Ç–∏
     * @returns {boolean} - –ß–∏ —î –∞–∫—Ç–∏–≤–Ω–∞ –≥—Ä–∞
     */
    hasActiveGame(roomId) {
        const state = this.getTimeState(roomId);
        return state && state.gameActive && state.currentTimer > 0;
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–±–µ—Ä–µ–∂–µ–Ω—É –≥—Ä—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–∞—É–∑–∏
     * @param {string} roomId - ID –∫—ñ–º–Ω–∞—Ç–∏
     * @returns {object|null} - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥—Ä—É
     */
    getGameInfo(roomId) {
        const calculatedState = this.calculateCurrentTime(roomId);
        if (!calculatedState) return null;

        return {
            roomId: calculatedState.roomId,
            timeRemaining: calculatedState.currentTimer,
            totalActiveTime: calculatedState.totalActiveTime,
            totalPausedTime: calculatedState.totalPausedTime,
            totalTime: calculatedState.totalGameTime,
            score: calculatedState.score,
            isPaused: calculatedState.isPaused,
            isValid: calculatedState.isValid,
            formattedTimeRemaining: this.formatTime(calculatedState.currentTimer),
            formattedActiveTime: this.formatTime(calculatedState.totalActiveTime),
            formattedPausedTime: this.formatTime(calculatedState.totalPausedTime)
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç—É—î —á–∞—Å —É –≤–∏–≥–ª—è–¥—ñ MM:SS
     * @param {number} seconds - –°–µ–∫—É–Ω–¥–∏
     * @returns {string} - –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —á–∞—Å
     */
    formatTime(seconds) {
        const validSeconds = Math.max(0, Math.floor(seconds));
        const minutes = Math.floor(validSeconds / 60);
        const secs = validSeconds % 60;
        return `${minutes}:${secs.toString().padStart(2, '0')}`;
    }
}

// ==========================================
// GLOBAL INSTANCE
// ==========================================

// –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
window.pvpTimePersistence = new PVPTimePersistence();

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { PVPTimePersistence };
}

console.log('‚úÖ PVP Time Persistence initialized');