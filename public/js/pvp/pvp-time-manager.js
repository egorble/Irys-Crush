// ==========================================
// PVP TIME MANAGER - –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–ï –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ß–ê–°–û–ú
// ==========================================

class PVPTimeManager {
    constructor() {
        this.roomTimeCache = new Map(); // roomId -> timeData
        this.defaultGameTimeMinutes = 2;
        this.minGameTimeMinutes = 1;
        this.maxGameTimeMinutes = 30;
    }

    // ==========================================
    // TIME VALIDATION AND CONVERSION
    // ==========================================

    /**
     * –í–∞–ª—ñ–¥—É—î —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É—î —á–∞—Å –≥—Ä–∏
     * @param {any} input - –í—Ö—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è (–º–æ–∂–µ –±—É—Ç–∏ —Å–µ–∫—É–Ω–¥–∏, —Ö–≤–∏–ª–∏–Ω–∏, –∞–±–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–µ)
     * @param {string} inputType - –¢–∏–ø –≤—Ö—ñ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è ('seconds', 'minutes', 'auto')
     * @returns {object} - { minutes, seconds, isValid, source }
     */
    validateAndConvertTime(input, inputType = 'auto') {
        console.log('üïê Time validation input:', { input, inputType, type: typeof input });

        let timeMinutes = this.defaultGameTimeMinutes;
        let isValid = false;
        let source = 'default';

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ input —î –≤–∞–ª—ñ–¥–Ω–∏–º —á–∏—Å–ª–æ–º
            const numericInput = Number(input);
            
            if (!isNaN(numericInput) && numericInput > 0) {
                if (inputType === 'seconds' || (inputType === 'auto' && numericInput > 30)) {
                    // –í—Ö—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    timeMinutes = Math.floor(numericInput / 60);
                    source = 'seconds_converted';
                } else if (inputType === 'minutes' || (inputType === 'auto' && numericInput <= 30)) {
                    // –í—Ö—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö
                    timeMinutes = Math.floor(numericInput);
                    source = 'minutes_direct';
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–µ–∂—ñ
                if (timeMinutes >= this.minGameTimeMinutes && timeMinutes <= this.maxGameTimeMinutes) {
                    isValid = true;
                } else {
                    console.warn(`‚ö†Ô∏è Time ${timeMinutes} minutes is out of bounds (${this.minGameTimeMinutes}-${this.maxGameTimeMinutes})`);
                    timeMinutes = Math.max(this.minGameTimeMinutes, Math.min(this.maxGameTimeMinutes, timeMinutes));
                    source = 'clamped';
                    isValid = true;
                }
            }
        } catch (error) {
            console.error('‚ùå Time validation error:', error);
        }

        const result = {
            minutes: timeMinutes,
            seconds: timeMinutes * 60,
            isValid,
            source,
            originalInput: input
        };

        console.log('üïê Time validation result:', result);
        return result;
    }

    // ==========================================
    // ROOM TIME MANAGEMENT
    // ==========================================

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —á–∞—Å –¥–ª—è –∫—ñ–º–Ω–∞—Ç–∏
     * @param {string} roomId - ID –∫—ñ–º–Ω–∞—Ç–∏
     * @param {any} timeValue - –ó–Ω–∞—á–µ–Ω–Ω—è —á–∞—Å—É
     * @param {string} source - –î–∂–µ—Ä–µ–ª–æ —á–∞—Å—É ('contract', 'ui', 'default')
     * @param {string} inputType - –¢–∏–ø –≤—Ö—ñ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
     */
    setRoomTime(roomId, timeValue, source = 'unknown', inputType = 'auto') {
        const timeData = this.validateAndConvertTime(timeValue, inputType);
        timeData.source = source;
        timeData.setAt = Date.now();
        
        this.roomTimeCache.set(roomId, timeData);
        
        console.log(`üïê Room ${roomId} time set:`, timeData);
        return timeData;
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —á–∞—Å –¥–ª—è –∫—ñ–º–Ω–∞—Ç–∏
     * @param {string} roomId - ID –∫—ñ–º–Ω–∞—Ç–∏
     * @returns {object} - –î–∞–Ω—ñ –ø—Ä–æ —á–∞—Å
     */
    getRoomTime(roomId) {
        const cached = this.roomTimeCache.get(roomId);
        if (cached) {
            console.log(`üïê Room ${roomId} time retrieved from cache:`, cached);
            return cached;
        }

        // –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–µ—à–æ–≤–∞–Ω–æ–≥–æ —á–∞—Å—É, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π
        const defaultTime = this.validateAndConvertTime(this.defaultGameTimeMinutes, 'minutes');
        defaultTime.source = 'default_fallback';
        
        console.log(`üïê Room ${roomId} using default time:`, defaultTime);
        return defaultTime;
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —á–∞—Å –∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —Ç–∞ –∫–µ—à—É—î –π–æ–≥–æ
     * @param {string} roomId - ID –∫—ñ–º–Ω–∞—Ç–∏
     * @param {object} contract - –ö–æ–Ω—Ç—Ä–∞–∫—Ç
     * @returns {Promise<object>} - –î–∞–Ω—ñ –ø—Ä–æ —á–∞—Å
     */
    async fetchAndCacheRoomTimeFromContract(roomId, contract) {
        try {
            console.log(`üîç Time Manager: Fetching time for room ${roomId} from contract...`);
            
            const room = await contract.getPvPRoom(roomId);
            // –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ–≤–µ—Ä—Ç–∞—î: (host, entryFee, gameTime, players, isActive, gameStarted, maxPlayers)
            // gameTime –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó [2]
            const rawGameTime = room[2]; // gameTime –∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
            const gameDurationSeconds = Number(rawGameTime);
            
            console.log(`üîç Time Manager: Contract raw data for room ${roomId}:`, {
                rawGameTime: rawGameTime.toString(),
                rawGameTimeType: typeof rawGameTime,
                gameDurationSeconds,
                isValid: !isNaN(gameDurationSeconds) && gameDurationSeconds > 0
            });
            
            // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
            if (isNaN(gameDurationSeconds) || gameDurationSeconds <= 0) {
                console.warn(`‚ö†Ô∏è Time Manager: Invalid time from contract for room ${roomId}, using default`);
                const defaultTime = this.setRoomTime(roomId, this.defaultGameTimeMinutes, 'contract_invalid', 'minutes');
                return defaultTime;
            }
            
            const timeData = this.setRoomTime(roomId, gameDurationSeconds, 'contract', 'seconds');
            
            console.log(`‚úÖ Time Manager: Room ${roomId} time fetched and cached:`, {
                roomId,
                contractSeconds: gameDurationSeconds,
                processedMinutes: timeData.minutes,
                processedSeconds: timeData.seconds,
                source: timeData.source
            });
            
            return timeData;
        } catch (error) {
            console.error(`‚ùå Time Manager: Failed to fetch time for room ${roomId}:`, error);
            
            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π —á–∞—Å —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
            const defaultTime = this.setRoomTime(roomId, this.defaultGameTimeMinutes, 'error_fallback', 'minutes');
            return defaultTime;
        }
    }

    // ==========================================
    // UTILITY METHODS
    // ==========================================

    /**
     * –§–æ—Ä–º–∞—Ç—É—î —á–∞—Å —É –≤–∏–≥–ª—è–¥—ñ MM:SS
     * @param {number} seconds - –°–µ–∫—É–Ω–¥–∏
     * @returns {string} - –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —á–∞—Å
     */
    formatTime(seconds) {
        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
        const validSeconds = isNaN(seconds) || seconds < 0 ? 0 : Math.floor(seconds);
        
        const minutes = Math.floor(validSeconds / 60);
        const secs = validSeconds % 60;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ NaN –ø—ñ—Å–ª—è –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
        const formattedMinutes = isNaN(minutes) ? 0 : minutes;
        const formattedSeconds = isNaN(secs) ? 0 : secs;
        
        return `${formattedMinutes}:${formattedSeconds.toString().padStart(2, '0')}`;
    }

    /**
     * –û—á–∏—â–∞—î –∫–µ—à —á–∞—Å—É –¥–ª—è –∫—ñ–º–Ω–∞—Ç–∏
     * @param {string} roomId - ID –∫—ñ–º–Ω–∞—Ç–∏
     */
    clearRoomTime(roomId) {
        this.roomTimeCache.delete(roomId);
        console.log(`üóëÔ∏è Cleared time cache for room ${roomId}`);
    }

    /**
     * –û—á–∏—â–∞—î –≤–µ—Å—å –∫–µ—à —á–∞—Å—É
     */
    clearAllRoomTimes() {
        this.roomTimeCache.clear();
        console.log('üóëÔ∏è Cleared all room time cache');
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É
     */
    getCacheStats() {
        const stats = {
            totalRooms: this.roomTimeCache.size,
            rooms: {}
        };

        for (const [roomId, timeData] of this.roomTimeCache.entries()) {
            stats.rooms[roomId] = {
                minutes: timeData.minutes,
                source: timeData.source,
                setAt: new Date(timeData.setAt).toISOString()
            };
        }

        return stats;
    }

    // ==========================================
    // INTEGRATION HELPERS
    // ==========================================

    /**
     * –°—Ç–≤–æ—Ä—é—î —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ PVPGameEngine
     * @param {string} roomId - ID –∫—ñ–º–Ω–∞—Ç–∏
     * @returns {function} - –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Å—É
     */
    createTimeGetter(roomId) {
        return () => {
            const timeData = this.getRoomTime(roomId);
            return {
                minutes: timeData.minutes,
                seconds: timeData.seconds,
                formatted: this.formatTime(timeData.seconds)
            };
        };
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î —á–∞—Å –º—ñ–∂ –≤—Å—ñ–º–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ PVP —Å–∏—Å—Ç–µ–º–∏
     * @param {string} roomId - ID –∫—ñ–º–Ω–∞—Ç–∏
     * @param {any} timeValue - –ó–Ω–∞—á–µ–Ω–Ω—è —á–∞—Å—É
     * @param {string} source - –î–∂–µ—Ä–µ–ª–æ —á–∞—Å—É
     */
    syncTimeAcrossComponents(roomId, timeValue, source = 'sync') {
        const timeData = this.setRoomTime(roomId, timeValue, source);
        
        // –û–Ω–æ–≤–ª—é—î–º–æ UI –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—â–æ –≤–æ–Ω–∏ —ñ—Å–Ω—É—é—Ç—å
        this.updateUIElements(roomId, timeData);
        
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ñ–Ω—à—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø—Ä–æ –∑–º—ñ–Ω—É —á–∞—Å—É
        if (window.dispatchEvent) {
            window.dispatchEvent(new CustomEvent('pvpTimeUpdated', {
                detail: { roomId, timeData }
            }));
        }
        
        return timeData;
    }

    /**
     * –û–Ω–æ–≤–ª—é—î UI –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –Ω–æ–≤–∏–º —á–∞—Å–æ–º
     * @param {string} roomId - ID –∫—ñ–º–Ω–∞—Ç–∏
     * @param {object} timeData - –î–∞–Ω—ñ –ø—Ä–æ —á–∞—Å
     */
    updateUIElements(roomId, timeData) {
        // –ù–ï –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É –∑ PVP Game Engine
        // –¢–∞–π–º–µ—Ä –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ PVP Game Engine
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—ñ–º–Ω–∞—Ç—É –≤ UI
        const roomInfoElements = document.querySelectorAll(`[data-room-id="${roomId}"] .game-duration`);
        roomInfoElements.forEach(element => {
            element.textContent = `${timeData.minutes} min`;
        });
        
        console.log('üîÑ Time Manager updated UI elements for room', roomId, '- timer left to PVP Game Engine');
    }
}

// ==========================================
// GLOBAL INSTANCE
// ==========================================

// –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
window.pvpTimeManager = new PVPTimeManager();

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { PVPTimeManager };
}

console.log('‚úÖ PVP Time Manager initialized');