const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Irys –º–µ—Ä–µ–∂—ñ
const IRYS_CONFIG = {
    name: 'Irys Testnet',
    chainId: 1270,
    rpcUrl: 'https://testnet-rpc.irys.xyz/v1/execution-rpc',
    symbol: 'IRYS',
    decimals: 18
};

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è
const DISTRIBUTION_CONFIG = {
    tokenAmount: '0.1', // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è
    gasLimit: '21000',
    maxGasPrice: '20000000000', // 20 Gwei
};

class TokenDistributor {
    constructor() {
        this.provider = null;
        this.wallet = null;
        this.isInitialized = false;
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    async initialize() {
        try {
            if (this.isInitialized) {
                return true;
            }

            console.log('üîó –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TokenDistributor...');
            
            // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ RPC
            this.provider = new ethers.JsonRpcProvider(IRYS_CONFIG.rpcUrl);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            const network = await this.provider.getNetwork();
            console.log(`‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –º–µ—Ä–µ–∂—ñ: ${network.name} (Chain ID: ${network.chainId})`);
            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–∞–º–∞–Ω—Ü—è
            if (!process.env.DISTRIBUTOR_PRIVATE_KEY) {
                console.warn('‚ö†Ô∏è  DISTRIBUTOR_PRIVATE_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ! –†–æ–∑—Å–∏–ª–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤ –±—É–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
                return false;
            }
            
            this.wallet = new ethers.Wallet(process.env.DISTRIBUTOR_PRIVATE_KEY, this.provider);
            console.log(`üëõ –ì–∞–º–∞–Ω–µ—Ü—å —Ä–æ–∑—Å–∏–ª–∫–∏: ${this.wallet.address}`);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
            const balance = await this.provider.getBalance(this.wallet.address);
            const balanceInIRYS = ethers.formatEther(balance);
            console.log(`üí∞ –ë–∞–ª–∞–Ω—Å —Ä–æ–∑—Å–∏–ª–∫–∏: ${balanceInIRYS} IRYS`);
            
            if (parseFloat(balanceInIRYS) < 1) {
                console.warn('‚ö†Ô∏è  –ù–∏–∑—å–∫–∏–π –±–∞–ª–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è —Ä–æ–∑—Å–∏–ª–∫–∏! –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –º–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 1 IRYS');
            }
            
            this.isInitialized = true;
            return true;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó TokenDistributor:', error.message);
            return false;
        }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∞–¥—Ä–µ—Å–∞ –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–ª–∞ —Ç–æ–∫–µ–Ω–∏
    async checkAlreadyReceived(address) {
        const logFile = path.join(__dirname, '..', 'reward_claims.txt');
        
        if (!fs.existsSync(logFile)) {
            return false;
        }

        try {
            const content = fs.readFileSync(logFile, 'utf8');
            const lines = content.split('\n').filter(line => line.trim());
            
            return lines.some(line => {
                try {
                    const data = JSON.parse(line);
                    return data.wallet && data.wallet.toLowerCase() === address.toLowerCase();
                } catch (e) {
                    return false;
                }
            });
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ reward_claims.txt:', error.message);
            return false;
        }
    }

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤ –æ–¥–Ω–æ–º—É –æ—Ç—Ä–∏–º—É–≤–∞—á—É
    async sendTokens(recipientAddress, amount = DISTRIBUTION_CONFIG.tokenAmount) {
        try {
            if (!this.isInitialized) {
                const initialized = await this.initialize();
                if (!initialized) {
                    throw new Error('TokenDistributor –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                }
            }

            console.log(`üí∏ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ ${amount} IRYS –¥–æ ${recipientAddress}...`);

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–≤
            const alreadyReceived = await this.checkAlreadyReceived(recipientAddress);
            if (alreadyReceived) {
                console.log(`‚è≠Ô∏è  ${recipientAddress} –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–≤ —Ç–æ–∫–µ–Ω–∏`);
                return { 
                    success: false, 
                    error: 'already_received',
                    message: '–¶–µ–π –≥–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–≤ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É' 
                };
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É –≥–∞–º–∞–Ω—Ü—è —Ä–æ–∑—Å–∏–ª–∫–∏
            const balance = await this.provider.getBalance(this.wallet.address);
            const balanceInIRYS = parseFloat(ethers.formatEther(balance));
            const requiredAmount = parseFloat(amount);

            if (balanceInIRYS < requiredAmount) {
                console.error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏: ${balanceInIRYS} < ${requiredAmount}`);
                return { 
                    success: false, 
                    error: 'insufficient_funds',
                    message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –≥–∞–º–∞–Ω—Ü—ñ —Ä–æ–∑—Å–∏–ª–∫–∏' 
                };
            }

            // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            const tx = {
                to: recipientAddress,
                value: ethers.parseEther(amount),
                gasLimit: DISTRIBUTION_CONFIG.gasLimit,
            };

            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ –≥–∞–∑—É
            const feeData = await this.provider.getFeeData();
            tx.gasPrice = feeData.gasPrice;

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏ –≥–∞–∑—É
            if (tx.gasPrice > BigInt(DISTRIBUTION_CONFIG.maxGasPrice)) {
                console.log(`‚ö†Ô∏è  –¶—ñ–Ω–∞ –≥–∞–∑—É –∑–∞–Ω–∞–¥—Ç–æ –≤–∏—Å–æ–∫–∞: ${ethers.formatUnits(tx.gasPrice, 'gwei')} Gwei`);
                return { 
                    success: false, 
                    error: 'gas_too_high',
                    message: '–¶—ñ–Ω–∞ –≥–∞–∑—É –∑–∞–Ω–∞–¥—Ç–æ –≤–∏—Å–æ–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ' 
                };
            }

            // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            const transaction = await this.wallet.sendTransaction(tx);
            console.log(`üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: ${transaction.hash}`);

            // –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            const receipt = await transaction.wait();
            
            if (receipt.status === 1) {
                console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ ${amount} IRYS –¥–æ ${recipientAddress}`);
                
                // –õ–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                const logEntry = {
                    wallet: recipientAddress,
                    amount: amount,
                    txHash: transaction.hash,
                    timestamp: new Date().toISOString(),
                    gasUsed: receipt.gasUsed.toString(),
                    gasPrice: tx.gasPrice.toString(),
                    status: 'success'
                };
                
                this.saveTransactionLog(logEntry);
                
                return { 
                    success: true, 
                    txHash: transaction.hash,
                    message: `–£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ ${amount} IRYS!`,
                    explorerUrl: `https://testnet-explorer.irys.xyz/tx/${transaction.hash}`
                };
            } else {
                console.log(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è: ${transaction.hash}`);
                return { 
                    success: false, 
                    error: 'transaction_failed',
                    message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è' 
                };
            }

        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–æ ${recipientAddress}:`, error.message);
            
            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
            const errorLog = {
                wallet: recipientAddress,
                amount: amount,
                error: error.message,
                timestamp: new Date().toISOString(),
                status: 'error'
            };
            this.saveTransactionLog(errorLog);
            
            return { 
                success: false, 
                error: 'send_failed',
                message: `–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: ${error.message}` 
            };
        }
    }

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    saveTransactionLog(logEntry) {
        try {
            const logFile = path.join(__dirname, '..', 'distribution_log.txt');
            const logLine = JSON.stringify(logEntry) + '\n';
            fs.appendFileSync(logFile, logLine);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:', error.message);
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async getStats() {
        try {
            if (!this.isInitialized) {
                await this.initialize();
            }

            const stats = {
                isAvailable: this.isInitialized,
                walletAddress: this.wallet ? this.wallet.address : null,
                balance: '0',
                totalDistributed: 0,
                totalTransactions: 0
            };

            if (this.wallet) {
                const balance = await this.provider.getBalance(this.wallet.address);
                stats.balance = ethers.formatEther(balance);
            }

            // –ß–∏—Ç–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –ª–æ–≥—É
            const logFile = path.join(__dirname, '..', 'distribution_log.txt');
            if (fs.existsSync(logFile)) {
                const content = fs.readFileSync(logFile, 'utf8');
                const lines = content.split('\n').filter(line => line.trim());
                
                let totalDistributed = 0;
                let successfulTransactions = 0;

                lines.forEach(line => {
                    try {
                        const data = JSON.parse(line);
                        if (data.status === 'success' && data.amount) {
                            totalDistributed += parseFloat(data.amount);
                            successfulTransactions++;
                        }
                    } catch (e) {
                        // –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ —Ä—è–¥–∫–∏
                    }
                });

                stats.totalDistributed = totalDistributed;
                stats.totalTransactions = successfulTransactions;
            }

            return stats;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
            return {
                isAvailable: false,
                error: error.message
            };
        }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–∏—Å—Ç–µ–º–∏
    async isAvailable() {
        if (!this.isInitialized) {
            await this.initialize();
        }
        return this.isInitialized;
    }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
const tokenDistributor = new TokenDistributor();

module.exports = tokenDistributor; 