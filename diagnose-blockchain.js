#!/usr/bin/env node

const { ethers } = require('ethers');
require('dotenv').config();

// Configuration
const IRYS_RPC_URL = process.env.IRYS_RPC_URL || 'https://testnet-rpc.irys.xyz/v1/execution-rpc';
const CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS;
const PRIVATE_KEY = process.env.PRIVATE_KEY;

const CONTRACT_ABI = [
  "function getPlayer(address _player) view returns (string memory nickname, uint256 highScore, uint256 gamesPlayed, uint256 lastPlayed)",
  "function getLeaderboard(uint256 _limit) view returns (address[] memory addresses, string[] memory nicknames, uint256[] memory scores)",
  "function isPlayerRegistered(address _player) view returns (bool)",
  "function isNicknameAvailable(string memory _nickname) view returns (bool)",
  "function getTotalPlayers() view returns (uint256)"
];

async function diagnoseBlockchain() {
  console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ë–õ–û–ö–ß–ï–ô–ù–£ IRYS');
  console.log('================================');
  
  // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  console.log('\nüìã 1. –ü–ï–†–ï–í–Ü–†–ö–ê –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á:');
  console.log(`   RPC URL: ${IRYS_RPC_URL}`);
  console.log(`   Contract Address: ${CONTRACT_ADDRESS || '‚ùå –ù–ï –í–°–¢–ê–ù–û–í–õ–ï–ù–û'}`);
  console.log(`   Private Key: ${PRIVATE_KEY ? '‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '‚ùå –ù–ï –í–°–¢–ê–ù–û–í–õ–ï–ù–û'}`);
  
  if (!CONTRACT_ADDRESS) {
    console.log('\n‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: CONTRACT_ADDRESS –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!');
    console.log('   –°—Ç–≤–æ—Ä—ñ—Ç—å .env —Ñ–∞–π–ª –∑ CONTRACT_ADDRESS=your_contract_address');
    return;
  }
  
  // 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ RPC
  console.log('\nüåê 2. –ü–ï–†–ï–í–Ü–†–ö–ê –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û RPC:');
  try {
    const provider = new ethers.JsonRpcProvider(IRYS_RPC_URL);
    
    // –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    const network = await provider.getNetwork();
    console.log(`   ‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –º–µ—Ä–µ–∂—ñ: ${network.name} (Chain ID: ${network.chainId})`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –±–ª–æ–∫—É
    const blockNumber = await provider.getBlockNumber();
    console.log(`   ‚úÖ –û—Å—Ç–∞–Ω–Ω—ñ–π –±–ª–æ–∫: ${blockNumber}`);
    
    // 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
    console.log('\nüìÑ 3. –ü–ï–†–ï–í–Ü–†–ö–ê –ö–û–ù–¢–†–ê–ö–¢–£:');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –∫–æ–¥ –∑–∞ –∞–¥—Ä–µ—Å–æ—é
    const code = await provider.getCode(CONTRACT_ADDRESS);
    if (code === '0x') {
      console.log(`   ‚ùå –ó–∞ –∞–¥—Ä–µ—Å–æ—é ${CONTRACT_ADDRESS} –Ω–µ–º–∞—î –∫–æ–¥—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É!`);
      console.log('   –ú–æ–∂–ª–∏–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ –∞–±–æ –∞–¥—Ä–µ—Å–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞.');
      return;
    } else {
      console.log(`   ‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é ${CONTRACT_ADDRESS}`);
      console.log(`   –†–æ–∑–º—ñ—Ä –∫–æ–¥—É: ${(code.length - 2) / 2} –±–∞–π—Ç`);
    }
    
    // 4. –¢–µ—Å—Ç –≤–∏–∫–ª–∏–∫—ñ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
    console.log('\nüîß 4. –¢–ï–°–¢ –í–ò–ö–õ–ò–ö–Ü–í –ö–û–ù–¢–†–ê–ö–¢–£:');
    const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, provider);
    
    try {
      const totalPlayers = await contract.getTotalPlayers();
      console.log(`   ‚úÖ getTotalPlayers(): ${totalPlayers}`);
    } catch (error) {
      console.log(`   ‚ùå getTotalPlayers() –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
    }
    
    try {
      const isAvailable = await contract.isNicknameAvailable('test123');
      console.log(`   ‚úÖ isNicknameAvailable('test123'): ${isAvailable}`);
    } catch (error) {
      console.log(`   ‚ùå isNicknameAvailable() –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
    }
    
    try {
      const [addresses, nicknames, scores] = await contract.getLeaderboard(5);
      console.log(`   ‚úÖ getLeaderboard(5): ${addresses.length} –≥—Ä–∞–≤—Ü—ñ–≤`);
      if (addresses.length > 0) {
        console.log(`   –¢–æ–ø –≥—Ä–∞–≤–µ—Ü—å: ${nicknames[0]} (${scores[0]} –æ—á–æ–∫)`);
      }
    } catch (error) {
      console.log(`   ‚ùå getLeaderboard() –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
    }
    
    // 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–∞–º–∞–Ω—Ü—è (—è–∫—â–æ —î –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á)
    if (PRIVATE_KEY) {
      console.log('\nüí∞ 5. –ü–ï–†–ï–í–Ü–†–ö–ê –ì–ê–ú–ê–ù–¶–Ø:');
      try {
        const wallet = new ethers.Wallet(PRIVATE_KEY, provider);
        const address = wallet.address;
        const balance = await provider.getBalance(address);
        
        console.log(`   ‚úÖ –ê–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è: ${address}`);
        console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å: ${ethers.formatEther(balance)} IRYS`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å
        try {
          const isRegistered = await contract.isPlayerRegistered(address);
          console.log(`   –ì—Ä–∞–≤–µ—Ü—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: ${isRegistered ? '‚úÖ –¢–∞–∫' : '‚ùå –ù—ñ'}`);
          
          if (isRegistered) {
            const [nickname, highScore, gamesPlayed, lastPlayed] = await contract.getPlayer(address);
            console.log(`   –ù—ñ–∫–Ω–µ–π–º: ${nickname}`);
            console.log(`   –ù–∞–π–∫—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${highScore}`);
            console.log(`   –Ü–≥–æ—Ä –∑—ñ–≥—Ä–∞–Ω–æ: ${gamesPlayed}`);
          }
        } catch (error) {
          console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥—Ä–∞–≤—Ü—è: ${error.message}`);
        }
        
      } catch (error) {
        console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–∞–º–∞–Ω—Ü—è: ${error.message}`);
      }
    }
    
    // 6. –ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    console.log('\nüìä 6. –ó–ê–ì–ê–õ–¨–ù–ò–ô –°–¢–ê–¢–£–°:');
    console.log('   ‚úÖ RPC –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: OK');
    console.log('   ‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–Ω–∞–π–¥–µ–Ω–æ: OK');
    console.log('   ‚úÖ –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å: OK');
    console.log('\nüéâ –í–°–ï –ü–†–ê–¶–Æ–Ñ –ü–†–ê–í–ò–õ–¨–ù–û!');
    
  } catch (error) {
    console.log(`\n‚ùå –ü–û–ú–ò–õ–ö–ê –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø: ${error.message}`);
    console.log('\n–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:');
    console.log('1. –ü—Ä–æ–±–ª–µ–º–∏ –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑\'—î–¥–Ω–∞–Ω–Ω—è–º');
    console.log('2. RPC —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
    console.log('3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π RPC URL');
    console.log('4. –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ñ–∞—î—Ä–≤–æ–ª–æ–º');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∞–¥—Ä–µ—Å–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
async function testContractAddress(address) {
  console.log(`\nüîç –¢–ï–°–¢ –ö–û–ù–¢–†–ê–ö–¢–£ –ó–ê –ê–î–†–ï–°–û–Æ: ${address}`);
  console.log('================================================');
  
  try {
    const provider = new ethers.JsonRpcProvider(IRYS_RPC_URL);
    const code = await provider.getCode(address);
    
    if (code === '0x') {
      console.log('‚ùå –ó–∞ —Ü—ñ—î—é –∞–¥—Ä–µ—Å–æ—é –Ω–µ–º–∞—î –∫–æ–¥—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É');
      return false;
    }
    
    console.log('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–Ω–∞–π–¥–µ–Ω–æ');
    
    const contract = new ethers.Contract(address, CONTRACT_ABI, provider);
    const totalPlayers = await contract.getTotalPlayers();
    console.log(`‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤: ${totalPlayers}`);
    
    return true;
  } catch (error) {
    console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
    return false;
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length > 0 && args[0] === 'test') {
    if (args[1]) {
      await testContractAddress(args[1]);
    } else {
      console.log('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node diagnose-blockchain.js test <contract_address>');
    }
  } else {
    await diagnoseBlockchain();
  }
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
process.on('unhandledRejection', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
  process.exit(1);
});

main().catch(console.error); 